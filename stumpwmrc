;; -*-lisp-*-

(in-package :stumpwm)

(run-shell-command "emacs --daemon")

(defmacro def-run-or-raise-command (cmd prop)
  (let ((cmd-str (string-downcase (symbol-name cmd))))
    `(defcommand ,cmd () ()
       (run-or-raise ,cmd-str ,prop))))

(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy
(setf *maxsize-border-width* 2)
(setf *transient-border-width* 1)
(setf *normal-border-width* 2)
(setf *float-window-border* 1)
(setf *float-window-title-height* 20)
(setf *window-border-style* :thin)
(set-focus-color "cyan")
(setf *mode-line-foreground-color* "gray")
(setf *mode-line-border-color* "black")
(setf *mode-line-pad-y* 2)
(setf *mode-line-background-color* "black")
(setf *mode-line-position* :top)
(setf *mode-line-border-width* 2)
(setf *message-window-padding* 2)
(setf *input-window-gravity* :center)
(setf *message-window-gravity* :bottom-right)
(set-font "-*-terminus-*-r-*-*-12-*-*-*-*-*-iso8859-1")

;; Turn on the modeline
(if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head)))

;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format* (list '(:eval (run-shell-command "date '+%a %h %d %I:%M %p' | tr -d '[:cntrl:]'" t)) " | Volume: " '(:eval (run-shell-command "amixer get Master | grep 'Front Left:' | cut -d ' ' -f 7,9 | tr -d '\[\][:cntrl:]' | sed -e 's/ on//' -e 's/ off/ mute/' " t)) " | %W ^>| %g"))


;; shell program used by `run-shell-command' (`sh' by default, which is *not*
;; `bash' nor `zsh')
(setq *shell-program* (stumpwm::getenv "SHELL"))  ; `getenv' is not exported



; Command definitions

(defcommand emacsclient () () (run-or-raise "emacsclient -c" '(:class "Emacs")))
(defcommand chrome () () (run-or-raise "google-chrome" '(:class "chrome")))
(defcommand gnome-terminal () () (run-shell-command "gnome-terminal"))
(defcommand dmenu-run () () (run-shell-command "dmenu_run"))

; keys

(define-key *root-map* (kbd "s") "hsplit")
(define-key *root-map* (kbd "S") "vsplit")
(define-key *root-map* (kbd "R") "iresize")
(define-key *root-map* (kbd "r") "remove-split")
(define-key *root-map* (kbd "q") "only")
(define-key *root-map* (kbd "b") "chrome")
(define-key *root-map* (kbd "c") "gnome-terminal")
(define-key *root-map* (kbd "e") "emacsclient")
(define-key *root-map* (kbd "l") "mode-line")

(define-key *top-map* (kbd "s-Left") "resize -40 0")
(define-key *top-map* (kbd "s-Right") "resize 40 0")
(define-key *top-map* (kbd "s-Up") "resize 0 -40")
(define-key *top-map* (kbd "s-Down") "resize 0 40")
(define-key *top-map* (kbd "s-space") "dmenu-run")

(defun show-key-seq (key seq val)
  (message (print-key-seq (reverse seq))))
(add-hook *key-press-hook* 'show-key-seq)


; local config if exists

(load "~/.localstumpwmrc" :if-does-not-exist nil)


(when *initializing*
  (grename "First")
  (gnewbg "Second")
  (gnewbg "Third")
  (gnewbg-float "Floating")
)
